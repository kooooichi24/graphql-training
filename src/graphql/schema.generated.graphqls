scalar DateTime

scalar EmailAddress

type Mutation {
  addUserToTeam(teamId: UUID!, userId: UUID!): User!
  createTeam(description: String, name: NonEmptyString!): Team!
  createUser(email: EmailAddress!, name: NonEmptyString!, teamId: UUID): User!
  deleteTeam(id: UUID!): Team
  deleteUser(id: UUID!): User
  removeUserFromTeam(teamId: UUID!, userId: UUID!): User!
  updateTeam(description: String, id: UUID!, name: NonEmptyString): Team
  updateUser(email: EmailAddress, id: UUID!, name: NonEmptyString, teamId: UUID): User
}

scalar NonEmptyString

scalar NonNegativeInt

"""
An object representing pagination information.
Used in cursor-based pagination based on the GraphQL Relay specification.
This object provides information for efficiently navigating through result sets.

@see [GraphQL Cursor Connections Specification](https://relay.dev/graphql/connections.htm)
"""
type PageInfo {
  """The cursor of the last edge in the set."""
  endCursor: String

  """
  `hasNextPage` is used to indicate whether more edges exist following the set defined by the clients arguments.
  If the client is paginating with `first`/`after`, then the server must return **true** if further edges exist, otherwise **false**.
  If the client is paginating with `last`/`before`, then the client may return **true** if edges further from `before` exist, if it can do so efficiently, otherwise may return **false**.
  """
  hasNextPage: Boolean!

  """
  `hasPreviousPage` is used to indicate whether more edges exist prior to the set defined by the clients arguments.
  If the client is paginating with `last`/`before`, then the server must return **true** if prior edges exist, otherwise **false**.
  If the client is paginating with first/after, then the client may return **true** if edges prior to `after` exist, if it can do so efficiently, otherwise may return **false**.
  """
  hasPreviousPage: Boolean!

  """The cursor of the first edge in the set."""
  startCursor: String
}

type Query {
  """Returns a team by ID."""
  team(
    """The identifier of the team."""
    id: UUID!
  ): Team

  """Returns a list of teams."""
  teams(
    """The cursor to start the pagination from."""
    after: String

    """
    The number of items to forward paginate (used with after).
    
    Maximum: 500
    """
    first: NonNegativeInt!
  ): TeamConnection!

  """
  Returns a user by ID.
  
  It is not possible to get users of other tenants.
  """
  user(
    """The ID of the user to return."""
    id: UUID!
  ): User

  """
  Returns a list of users.
  
  It is not possible to get users of other tenants.
  """
  users(
    """The cursor to start the pagination from."""
    after: String

    """
    The number of items to forward paginate (used with after).
    
    Maximum: 500
    """
    first: NonNegativeInt!
  ): UserConnection!
}

"""This object represents a team."""
type Team {
  """The description of the team."""
  description: String

  """The identifier of the team."""
  id: UUID!

  """The members of the team."""
  members(
    """The cursor to start the pagination from."""
    after: String

    """The number of items to forward paginate (used with after)."""
    first: NonNegativeInt!
  ): UserConnection!

  """The name of the team."""
  name: NonEmptyString!
}

type TeamConnection {
  edges: [TeamEdge!]!
  pageInfo: PageInfo!
}

type TeamEdge {
  cursor: String!
  node: Team!
}

scalar UUID

"""This object represents a user."""
type User {
  """The email address of the user."""
  email: EmailAddress!

  """The identifier of the user."""
  id: UUID!

  """The name of the user."""
  name: NonEmptyString!

  """The teams to which the user belongs."""
  teams(
    """The cursor to start the pagination from."""
    after: String

    """
    The number of items to forward paginate (used with after).
    
    Maximum: 500
    """
    first: NonNegativeInt!
  ): TeamConnection!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: String!
  node: User!
}