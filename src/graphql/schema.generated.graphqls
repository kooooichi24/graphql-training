"""This input represents the input to add a user to a team."""
input AddUserToTeamInput {
  """The ID of the team to add the user to."""
  teamId: ID!

  """The ID of the user to add to the team."""
  userId: ID!
}

"""This input represents the input to create a team."""
input CreateTeamInput {
  """The description of the team."""
  description: String

  """The name of the team."""
  name: NonEmptyString!
}

"""This input represents the input to create a user."""
input CreateUserInput {
  """The email address of the user."""
  email: EmailAddress!

  """The name of the user."""
  name: NonEmptyString!

  """The ID of the team to which the user belongs."""
  teamId: ID
}

scalar DateTime

"""This input represents the input to delete a team."""
input DeleteTeamInput {
  """The identifier of the team."""
  id: ID!
}

"""This input represents the input to delete a user."""
input DeleteUserInput {
  """The ID of the user to delete."""
  id: ID!
}

scalar EmailAddress

type Mutation {
  """Adds a user to a team."""
  addUserToTeam(input: AddUserToTeamInput!): UserOutput!

  """Creates a team."""
  createTeam(input: CreateTeamInput!): TeamOutput!

  """Creates a user."""
  createUser(input: CreateUserInput!): UserOutput!

  """Deletes a team."""
  deleteTeam(input: DeleteTeamInput!): TeamOutput

  """Deletes a user."""
  deleteUser(input: DeleteUserInput!): UserOutput!

  """Removes a user from a team."""
  removeUserFromTeam(input: RemoveUserFromTeamInput!): UserOutput!

  """Updates a team."""
  updateTeam(input: UpdateTeamInput!): TeamOutput

  """Updates a user."""
  updateUser(input: UpdateUserInput!): UserOutput!
}

"""
An interface for objects with a Globally Unique ID.

@see https://graphql.org/learn/global-object-identification/
"""
interface Node {
  """The ID of the object."""
  id: ID!
}

scalar NonEmptyString

scalar NonNegativeInt

"""
An object representing pagination information.
Used in cursor-based pagination based on the GraphQL Relay specification.
This object provides information for efficiently navigating through result sets.

@see [GraphQL Cursor Connections Specification](https://relay.dev/graphql/connections.htm)
"""
type PageInfo {
  """The cursor of the last edge in the set."""
  endCursor: String

  """
  `hasNextPage` is used to indicate whether more edges exist following the set defined by the clients arguments.
  If the client is paginating with `first`/`after`, then the server must return **true** if further edges exist, otherwise **false**.
  If the client is paginating with `last`/`before`, then the client may return **true** if edges further from `before` exist, if it can do so efficiently, otherwise may return **false**.
  """
  hasNextPage: Boolean!

  """
  `hasPreviousPage` is used to indicate whether more edges exist prior to the set defined by the clients arguments.
  If the client is paginating with `last`/`before`, then the server must return **true** if prior edges exist, otherwise **false**.
  If the client is paginating with first/after, then the client may return **true** if edges prior to `after` exist, if it can do so efficiently, otherwise may return **false**.
  """
  hasPreviousPage: Boolean!

  """The cursor of the first edge in the set."""
  startCursor: String
}

type Query {
  """Returns a team by ID."""
  team(
    """The identifier of the team."""
    id: ID!
  ): Team

  """Returns a list of teams sorted by name."""
  teams(
    """The cursor to start the pagination from."""
    after: String

    """The cursor to start the pagination from."""
    before: String

    """
    The number of items to forward paginate (used with after).
    
    Maximum: 500
    """
    first: NonNegativeInt

    """
    The number of items to backward paginate (used with before).
    
    Maximum: 500
    """
    last: NonNegativeInt
  ): TeamConnection!

  """
  Returns a user by ID.
  
  It is not possible to get users of other tenants.
  """
  user(
    """The ID of the user to return."""
    id: ID!
  ): User

  """
  Returns a list of users sorted by name.
  
  It is not possible to get users of other tenants.
  """
  users(
    """The cursor to start the pagination from."""
    after: String

    """The cursor to start the pagination from."""
    before: String

    """
    The number of items to forward paginate (used with after).
    
    Maximum: 500
    Default: 250 (If first or last is not specified)
    """
    first: NonNegativeInt

    """
    The number of items to backward paginate (used with before).
    
    Maximum: 500
    """
    last: NonNegativeInt
  ): UserConnection!
}

"""This input represents the input to remove a user from a team."""
input RemoveUserFromTeamInput {
  """The ID of the team to remove the user from."""
  teamId: ID!

  """The ID of the user to remove from the team."""
  userId: ID!
}

"""This object represents a team."""
type Team implements Node {
  """The description of the team."""
  description: String

  """The identifier of the team."""
  id: ID!

  """
  The members of the team.
  
  The list is sorted by name.
  """
  members(
    """The cursor to start the pagination from."""
    after: String

    """The cursor to start the pagination from."""
    before: String

    """The number of items to forward paginate (used with after)."""
    first: NonNegativeInt

    """
    The number of items to backward paginate (used with before).
    
    Maximum: 500
    """
    last: NonNegativeInt
  ): UserConnection!

  """The name of the team."""
  name: NonEmptyString!
}

type TeamConnection {
  edges: [TeamEdge!]!
  pageInfo: PageInfo!
}

type TeamEdge {
  cursor: String!
  node: Team!
}

"""This object represents the mutation response to the team."""
type TeamOutput {
  """The identifier of the team."""
  id: ID!
}

scalar UUID

"""This input represents the input to update a team."""
input UpdateTeamInput {
  """The description of the team."""
  description: String

  """The identifier of the team."""
  id: ID!

  """The name of the team."""
  name: NonEmptyString
}

"""This input represents the input to update a user."""
input UpdateUserInput {
  """The email address of the user."""
  email: EmailAddress

  """The ID of the user to update."""
  id: ID!

  """The name of the user."""
  name: NonEmptyString

  """The ID of the team to which the user belongs."""
  teamId: ID
}

"""This object represents a user."""
type User implements Node {
  """The email address of the user."""
  email: EmailAddress!

  """The identifier of the user."""
  id: ID!

  """The name of the user."""
  name: NonEmptyString!

  """
  The teams to which the user belongs.
  
  The list is sorted by name.
  """
  teams(
    """The cursor to start the pagination from."""
    after: String

    """The cursor to start the pagination from."""
    before: String

    """
    The number of items to forward paginate (used with after).
    
    Maximum: 500
    Default: 250 (If first or last is not specified)
    """
    first: NonNegativeInt

    """
    The number of items to backward paginate (used with before).
    
    Maximum: 500
    """
    last: NonNegativeInt
  ): TeamConnection!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: String!
  node: User!
}

"""This object represents the mutation response to the user."""
type UserOutput {
  """The identifier of the user."""
  id: ID!
}