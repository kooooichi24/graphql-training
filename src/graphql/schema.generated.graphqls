scalar DateTime

scalar EmailAddress

type Mutation {
  addUserToTeam(teamId: UUID!, userId: UUID!): User!
  createTeam(description: String, name: NonEmptyString!): Team!
  createUser(email: EmailAddress!, name: NonEmptyString!, teamId: UUID): User!
  deleteTeam(id: UUID!): Team
  deleteUser(id: UUID!): User
  removeUserFromTeam(teamId: UUID!, userId: UUID!): User!
  updateTeam(description: String, id: UUID!, name: NonEmptyString): Team
  updateUser(email: EmailAddress, id: UUID!, name: NonEmptyString, teamId: UUID): User
}

scalar NonEmptyString

scalar NonNegativeInt

"""
An object representing pagination information.
Used in cursor-based pagination based on the GraphQL Relay specification.
This object provides information for efficiently navigating through result sets.

@see [GraphQL Cursor Connections Specification](https://relay.dev/graphql/connections.htm)
"""
type PageInfo {
  """The cursor of the last edge in the set."""
  endCursor: String

  """
  `hasNextPage` is used to indicate whether more edges exist following the set defined by the clients arguments.
  If the client is paginating with `first`/`after`, then the server must return **true** if further edges exist, otherwise **false**.
  If the client is paginating with `last`/`before`, then the client may return **true** if edges further from `before` exist, if it can do so efficiently, otherwise may return **false**.
  """
  hasNextPage: Boolean!

  """
  `hasPreviousPage` is used to indicate whether more edges exist prior to the set defined by the clients arguments.
  If the client is paginating with `last`/`before`, then the server must return **true** if prior edges exist, otherwise **false**.
  If the client is paginating with first/after, then the client may return **true** if edges prior to `after` exist, if it can do so efficiently, otherwise may return **false**.
  """
  hasPreviousPage: Boolean!

  """The cursor of the first edge in the set."""
  startCursor: String
}

type Query {
  team(id: UUID!): Team
  teams(after: String, first: NonNegativeInt!): TeamConnection!
  user(id: UUID!): User
  users(after: String, first: NonNegativeInt!): UserConnection!
}

type Team {
  description: String
  id: UUID!
  members: [User!]!
  name: NonEmptyString!
}

type TeamConnection {
  edges: [TeamEdge!]!
  pageInfo: PageInfo!
}

type TeamEdge {
  cursor: String!
  node: Team!
}

scalar UUID

type User {
  email: EmailAddress!
  id: UUID!
  name: NonEmptyString!
  teams: [Team!]!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: String!
  node: User!
}