"""
This object represents a user.
"""
type User {
  """
  The identifier of the user.
  """
  id: UUID!

  """
  The name of the user.
  """
  name: NonEmptyString!

  """
  The email address of the user.
  """
  email: EmailAddress!

  """
  The teams to which the user belongs.
  """
  teams(
    """
    The number of items to forward paginate (used with after).

    Maximum: 500
    """
    first: NonNegativeInt!

    """
    The cursor to start the pagination from.
    """
    after: String
  ): TeamConnection!
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type Query {
  """
  Returns a list of users.

  It is not possible to get users of other tenants.
  """
  users(
    """
    The number of items to forward paginate (used with after).

    Maximum: 500
    """
    first: NonNegativeInt!

    """
    The cursor to start the pagination from.
    """
    after: String
  ): UserConnection!

  """
  Returns a user by ID.

  It is not possible to get users of other tenants.
  """
  user(
    """
    The ID of the user to return.
    """
    id: UUID!
  ): User
}

type Mutation {
  createUser(name: NonEmptyString!, email: EmailAddress!, teamId: UUID): User!
  updateUser(id: UUID!, name: NonEmptyString, email: EmailAddress, teamId: UUID): User
  deleteUser(id: UUID!): User

  addUserToTeam(userId: UUID!, teamId: UUID!): User!
  removeUserFromTeam(userId: UUID!, teamId: UUID!): User!
}
