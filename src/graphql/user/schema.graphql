"""
This object represents a user.
"""
type User implements Node {
  """
  The identifier of the user.
  """
  id: ID!

  """
  The name of the user.
  """
  name: NonEmptyString!

  """
  The email address of the user.
  """
  email: EmailAddress!

  """
  The teams to which the user belongs.

  The list is sorted by name.
  """
  teams(
    """
    The number of items to forward paginate (used with after).

    Maximum: 500
    Default: 250 (If first or last is not specified)
    """
    first: NonNegativeInt

    """
    The cursor to start the pagination from.
    """
    after: String

    """
    The number of items to backward paginate (used with before).

    Maximum: 500
    """
    last: NonNegativeInt

    """
    The cursor to start the pagination from.
    """
    before: String
  ): TeamConnection!
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type Query {
  """
  Returns a list of users sorted by name.

  It is not possible to get users of other tenants.
  """
  users(
    """
    The number of items to forward paginate (used with after).

    Maximum: 500
    Default: 250 (If first or last is not specified)
    """
    first: NonNegativeInt

    """
    The cursor to start the pagination from.
    """
    after: String

    """
    The number of items to backward paginate (used with before).

    Maximum: 500
    """
    last: NonNegativeInt

    """
    The cursor to start the pagination from.
    """
    before: String
  ): UserConnection!

  """
  Returns a user by ID.

  It is not possible to get users of other tenants.
  """
  user(
    """
    The ID of the user to return.
    """
    id: ID!
  ): User
}

"""
This object represents the mutation response to the user.
"""
type UserOutput {
  """
  The identifier of the user.
  """
  id: ID!
}

"""
This input represents the input to create a user.
"""
input CreateUserInput {
  """
  The name of the user.
  """
  name: NonEmptyString!

  """
  The email address of the user.
  """
  email: EmailAddress!

  """
  The ID of the team to which the user belongs.
  """
  teamId: ID
}

"""
This input represents the input to update a user.
"""
input UpdateUserInput {
  """
  The ID of the user to update.
  """
  id: ID!

  """
  The name of the user.
  """
  name: NonEmptyString

  """
  The email address of the user.
  """
  email: EmailAddress

  """
  The ID of the team to which the user belongs.
  """
  teamId: ID
}

"""
This input represents the input to delete a user.
"""
input DeleteUserInput {
  """
  The ID of the user to delete.
  """
  id: ID!
}

"""
This input represents the input to add a user to a team.
"""
input AddUserToTeamInput {
  """
  The ID of the user to add to the team.
  """
  userId: ID!

  """
  The ID of the team to add the user to.
  """
  teamId: ID!
}

"""
This input represents the input to remove a user from a team.
"""
input RemoveUserFromTeamInput {
  """
  The ID of the user to remove from the team.
  """
  userId: ID!

  """
  The ID of the team to remove the user from.
  """
  teamId: ID!
}

type Mutation {
  """
  Creates a user.
  """
  createUser(input: CreateUserInput!): UserOutput!

  """
  Updates a user.
  """
  updateUser(input: UpdateUserInput!): UserOutput!

  """
  Deletes a user.
  """
  deleteUser(input: DeleteUserInput!): UserOutput!

  """
  Adds a user to a team.
  """
  addUserToTeam(input: AddUserToTeamInput!): UserOutput!

  """
  Removes a user from a team.
  """
  removeUserFromTeam(input: RemoveUserFromTeamInput!): UserOutput!
}
